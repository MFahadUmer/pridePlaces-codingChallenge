{"ast":null,"code":"var _jsxFileName = \"/Users/muhammad/Desktop/node/new/pridePlaces-codingChallenge/src/component/posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customStyles = {\n  content: {\n    display: 'flex',\n    flexDirection: 'Column',\n    justifyContent: 'space-between',\n    top: '40%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    width: '60vw',\n    height: '60vh',\n    borderRadius: '10px',\n    backgroundColor: '#DCDCDC',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\nconst Posts = ({\n  title,\n  id,\n  body,\n  userId\n}) => {\n  _s();\n\n  const users = useSelector(state => state.users);\n  let username = '';\n  let userphrase = '';\n  let usersInfo;\n\n  if (users.users.length > 0) {\n    usersInfo = users.users.filter(e => e.id === userId);\n    username = usersInfo[0].name;\n    userphrase = usersInfo[0].company.catchPhrase;\n  }\n\n  const [modalIsOpen, setIsOpen] = useState(false);\n\n  const openModal = () => {\n    setIsOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"postTitle\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"postButton\",\n      onClick: openModal,\n      children: [id, \"-\\xA0\\xA0\", title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      onRequestClose: closeModal,\n      style: customStyles,\n      contentLabel: \"Example Modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"modalTitle\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"modalTitleAuthor\",\n          children: [\"written by\", username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"modalBody\",\n          children: body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"modalTitleAuthor\",\n          children: [username, \"'s CatchPhrase\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"modalCatchPhrase\",\n          children: userphrase\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"closeModalButtonDiv\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"closeModalButton\",\n          type: \"submit\",\n          onClick: closeModal,\n          children: \"close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Posts, \"PDPBQZMGy9qL5D2cqz8m3iQmN4Q=\", false, function () {\n  return [useSelector];\n});\n\n_c = Posts;\nPosts.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  body: PropTypes.string.isRequired,\n  userId: PropTypes.number.isRequired\n};\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/muhammad/Desktop/node/new/pridePlaces-codingChallenge/src/component/posts.js"],"names":["React","useState","Modal","useSelector","PropTypes","customStyles","content","display","flexDirection","justifyContent","top","left","right","bottom","width","height","borderRadius","backgroundColor","marginRight","transform","Posts","title","id","body","userId","users","state","username","userphrase","usersInfo","length","filter","e","name","company","catchPhrase","modalIsOpen","setIsOpen","openModal","closeModal","propTypes","string","isRequired","number"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst customStyles = {\n  content: {\n    display: 'flex',\n    flexDirection: 'Column',\n    justifyContent: 'space-between',\n    top: '40%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    width: '60vw',\n    height: '60vh',\n    borderRadius: '10px',\n    backgroundColor: '#DCDCDC',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n  },\n};\n\nconst Posts = ({\n  title, id, body, userId,\n}) => {\n  const users = useSelector((state) => state.users);\n  let username = '';\n  let userphrase = '';\n  let usersInfo;\n  if (users.users.length > 0) {\n    usersInfo = users.users.filter((e) => e.id === userId);\n    username = usersInfo[0].name;\n    userphrase = usersInfo[0].company.catchPhrase;\n  }\n  const [modalIsOpen, setIsOpen] = useState(false);\n\n  const openModal = () => {\n    setIsOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsOpen(false);\n  };\n  return (\n    <div className=\"postTitle\">\n      <button type=\"submit\" className=\"postButton\" onClick={openModal}>\n        {id}\n        -&nbsp;&nbsp;\n        {title}\n      </button>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        <div>\n          <h3 className=\"modalTitle\">{title}</h3>\n          <p className=\"modalTitleAuthor\">\n            written by\n            {username}\n          </p>\n          <p className=\"modalBody\">{body}</p>\n          <p className=\"modalTitleAuthor\">\n            {username}\n            &apos;s CatchPhrase\n          </p>\n          <p className=\"modalCatchPhrase\">{userphrase}</p>\n        </div>\n        <div className=\"closeModalButtonDiv\">\n          <button className=\"closeModalButton\" type=\"submit\" onClick={closeModal}>close</button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nPosts.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  body: PropTypes.string.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}